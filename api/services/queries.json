{
    "get_poll_meta": "SELECT p.poll_id, p.title, p.description, p.credits, p.created_at, u.firstname, AVG(r.rating)::float AS rating, COUNT(DISTINCT v.user_id) AS turnout FROM users u RIGHT JOIN polls p ON u.user_id = p.user_id LEFT JOIN statements s ON p.poll_id = s.poll_id LEFT JOIN votes v ON s.statement_id = v.statement_id LEFT JOIN ratings r ON p.poll_id = r.poll_id WHERE p.visible = 1 AND u.user_id != :user_id AND p.poll_id NOT IN (SELECT s2.poll_id FROM statements s2 LEFT JOIN votes v2 ON s2.statement_id = v2.statement_id WHERE v2.user_id = :user_id) GROUP BY p.poll_id, u.firstname ORDER BY turnout DESC, rating DESC, p.poll_id DESC",
    "post_poll_meta": "INSERT INTO polls (user_id, title, description, credits) VALUES (:user_id, :title, :description, :credits) RETURNING poll_id",
    "deactivate_poll": "UPDATE polls SET visible=0 WHERE poll_id=:poll_id",
    "reactivate_poll": "UPDATE polls SET visible=1 WHERE poll_id=:poll_id",
    "get_poll_statements": "SELECT statement_id, header, description FROM statements WHERE poll_id=:poll_id",
    "post_poll_statement": "INSERT INTO statements (poll_id, header, description) VALUES (:poll_id, :header, :description)",
    "get_statement_stats": "SELECT s.statement_id, s.header, s.description, AVG(v.vote)::float, PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY v.vote)::float FROM statements s LEFT JOIN votes v ON s.statement_id = v.statement_id WHERE s.poll_id = :poll_id GROUP BY s.statement_id",
    "validate_poll_ownership": "SELECT CASE COUNT(*) WHEN 1 THEN true ELSE false END FROM polls WHERE user_id = :user_id AND poll_id = :poll_id",
    "validate_user_rating": "SELECT CASE COUNT(*) WHEN 1 THEN false ELSE true END FROM ratings WHERE user_id = :user_id AND poll_id = :poll_id",
    "rate_poll": "INSERT INTO ratings (poll_id, user_id, rating, comment) VALUES (:poll_id, :user_id, :rating, :comment)",
    "get_poll_ratings": "SELECT r.poll_id, u.firstname, r.rating, r.comment FROM ratings r LEFT JOIN users u ON r.user_id = u.user_id WHERE poll_id = :poll_id",
    "register_user": "INSERT INTO users (email, password, firstname, lastname) VALUES (:email, :password, :firstname, :lastname)",
    "get_user": "SELECT user_id, password FROM users WHERE email=:email",
    "get_user_polls": "SELECT p.poll_id, p.visible, p.title, p.description, p.created_at, AVG(r.rating)::float AS rating, COUNT(DISTINCT v.user_id) AS turnout FROM polls p LEFT JOIN ratings r ON p.poll_id = r.poll_id LEFT JOIN statements s ON p.poll_id = s.poll_id LEFT JOIN votes v ON s.statement_id = v.statement_id WHERE p.user_id=:user_id GROUP BY p.poll_id ORDER BY turnout DESC, rating DESC, p.poll_id DESC",
    "get_user_votes": "SELECT p.poll_id, p.visible, p.title, p.description, (CASE WHEN EXISTS (SELECT 1 FROM ratings r2 WHERE r2.user_id = :user_id AND r2.poll_id = p.poll_id) THEN 1 ELSE 0 END), AVG(r.rating)::float, COUNT(DISTINCT v.user_id) AS turnout FROM users u RIGHT JOIN polls p ON u.user_id = p.user_id LEFT JOIN ratings r ON p.poll_id = r.poll_id LEFT JOIN statements s ON r.poll_id = s.poll_id LEFT JOIN votes v ON s.statement_id = v.statement_id WHERE p.poll_id IN (SELECT s2.poll_id FROM statements s2 LEFT JOIN votes v2 ON s2.statement_id = v2.statement_id WHERE v2.user_id = :user_id) GROUP BY p.poll_id",
    "post_user_votes": "INSERT INTO votes (statement_id, user_id, vote) VALUES (:statement_id, :user_id, :vote)",
    "get_user_votes_detailed": "SELECT s.statement_id, s.header, s.description, v.vote, (SELECT AVG(v.vote)::float FROM votes v WHERE v.statement_id = s.statement_id), (SELECT PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY v.vote)::float FROM votes v WHERE v.statement_id = s.statement_id) FROM statements s LEFT JOIN votes v ON s.statement_id = v.statement_id WHERE s.poll_id = :poll_id AND v.user_id = :user_id GROUP BY s.statement_id, v.vote"
}